<!DOCTYPE html>
<html>
<head>
    <title>Canvas Test</title>
    <style>
        body { display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; background-color: #f0f0f0; }
        canvas { border: 1px solid #ccc; }
    </style>
</head>
<body>
    <canvas id="myCanvas" width="600" height="600"></canvas>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');

        const canvasSize = 600;
        const centerPoint = [canvasSize / 2, canvasSize / 2];

        let borderPath = [ [100, 100], [500, 100], [500, 500], [100, 500] ];
        let currentDrawnPath = [];

        let dot = {
            x: borderPath[0][0], y: borderPath[0][1], size: 5, speed: 4,
            onBorder: true, currentEdgeIndex: 0, positionOnEdge: 0
        };
        const keys = { ArrowUp: false, ArrowDown: false, ArrowLeft: false, ArrowRight: false, Control: false };
        let isDrawing = false;
        let drawingDirection = null;
        let lastMove = { dx: 0, dy: 0 };

        // Qix variables
        var fps=30,step=10,lines=100,chc=lines/6,lw=3;
        var rb=["201","001","010","110","120","100"]; rbi=0;
        var mx,my,iii,nm=0,iii=999;
        var cd=[],rgb=[],cvs=[];
        var vt;

        function initQix() {
            mx = canvas.width;
            my = canvas.height;
            ctx.lineWidth=lw;
            for (let i=0;i<lines;i++){
              nm+=Math.round(255/lines);
              cvs.push(nm);
              rgb.push([ 0,0,0 ]);
            }
        }

        function rand(lo,hi=1,st=0){
             if (lo=="t"){out=Math.round(Math.random()) ? -1:1;}else{out=(Math.round(Math.random()*(hi-lo)))+lo;}
             return st ? String(out):out;
        }

        function x(x){
              out=[0,0,0];
              for (let z=0;z<3;z++){
               if (x[z]=="0") { out[z]=0 }
               else if (x[z]=="1") { out[z]=cvs[lines-1] }
               else if (x[z]=="2") { out[z]=cvs[lines-1]/2 }
              }
              return out;
        }

        function updateQix(){
             iii++;
             if (iii>chc){
              iii=0;
              rbi++;
              rbi= rbi>rb.length-1 ? 0 : rbi;

              tmp=[ rb[rbi][0],rb[rbi][1],rb[rbi][2]] ;
              tmp=x(tmp);
             } else {
              tmp=[rgb[lines-1][0],rgb[lines-1][1],rgb[lines-1][2]];
             }
             rgb.shift();
             rgb.push(tmp);

             for (let i=0;i<lines;i++){

             if (i<lines-1){
              for (let it=0;it<3;it++){
               if (rgb[i][it]==0) { rgb[i][it]=0 }
               else if (rgb[i][it]<cvs[i+1]) { rgb[i][it]=cvs[i]/2 }
               else { rgb[i][it]=cvs[i] }
              }
             }

              if (cd[i]==undefined && i>0){
               cd.push([cd[i-1][0]+step,cd[i-1][1]+step,cd[i-1][2]+step,cd[i-1][3]+step]);
              }
              if (cd[i]==undefined && i==0){
               cd.push([rand(9,mx-9),rand(9,my-9),rand(9,mx-9),rand(9,my-9)]);
               vt=[rand("t"),rand("t"),rand("t"),rand("t")];
              }
              if (i==0){
               if (cd[i][0]>5 && cd[i][0]<mx-5){
                vt[0]=rand(0,200)!=1 ? vt[0] : vt[0]*-1;
               }
               if (cd[i][1]>5 && cd[i][1]<my-5){
                vt[1]=rand(0,200)!=1 ? vt[1] : vt[1]*-1;
               }
               if (cd[i][2]>5 && cd[i][2]<mx-5){
                vt[2]=rand(0,200)!=1 ? vt[2] : vt[2]*-1;
               }
               if (cd[i][3]>5 && cd[i][3]<my-5){
                vt[3]=rand(0,200)!=1 ? vt[3] : vt[3]*-1;
               }
               let next_x1 = cd[i][0]+vt[0]*step;
               let next_y1 = cd[i][1]+vt[1]*step;
               let next_x2 = cd[i][2]+vt[2]*step;
               let next_y2 = cd[i][3]+vt[3]*step;

               if (!isPointInPolygon([next_x1, next_y1], borderPath)) {
                    vt[0] *= -1;
                    vt[1] *= -1;
               }
               if (!isPointInPolygon([next_x2, next_y2], borderPath)) {
                    vt[2] *= -1;
                    vt[3] *= -1;
               }

               cd.unshift([cd[i][0]+vt[0]*step,cd[i][1]+vt[1]*step,cd[i][2]+vt[2]*step,cd[i][3]+vt[3]*step]);
               cd.pop();
              }
             }
        }

        function drawQix() {
            for (let i=0;i<lines;i++){
              if (cd[lines-i]!=undefined){
               let r=rgb[i][0]; let g=rgb[i][1]; let b=rgb[i][2];
               ctx.strokeStyle="rgba("+r+","+g+","+b+",200)";
               ctx.beginPath(); ctx.moveTo(cd[lines-i][0],cd[lines-i][1]);
               ctx.lineTo(cd[lines-i][2],cd[lines-i][3]); ctx.stroke();
              }
            }
        }

        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = 'blue';
            if (borderPath.length > 0) {
                ctx.beginPath();
                ctx.moveTo(borderPath[0][0], borderPath[0][1]);
                for(let i = 1; i < borderPath.length; i++) ctx.lineTo(borderPath[i][0], borderPath[i][1]);
                ctx.closePath();
                ctx.fill();
                ctx.strokeStyle = 'black';
                ctx.lineWidth = 2;
                ctx.stroke();
            }
            if (isDrawing && currentDrawnPath.length > 0) {
                ctx.strokeStyle = 'yellow';
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.moveTo(currentDrawnPath[0][0], currentDrawnPath[0][1]);
                for (let i = 1; i < currentDrawnPath.length; i++) ctx.lineTo(currentDrawnPath[i][0], currentDrawnPath[i][1]);
                ctx.lineTo(dot.x, dot.y);
                ctx.stroke();
            }
            ctx.beginPath();
            ctx.arc(dot.x, dot.y, dot.size, 0, Math.PI * 2);
            ctx.fillStyle = 'red';
            ctx.fill();

            drawQix();
        }

        function isPointOnSegment(p, a, b) {
            const cp = (p[1] - a[1]) * (b[0] - a[0]) - (p[0] - a[0]) * (b[1] - a[1]);
            if (Math.abs(cp) > 1) return false;
            const dp = (p[0] - a[0]) * (b[0] - a[0]) + (p[1] - a[1]) * (b[1] - a[1]);
            if (dp < 0) return false;
            const sl_ba = (b[0] - a[0])**2 + (b[1] - a[1])**2;
            if (dp > sl_ba) return false;
            return true;
        }

        function isOnBorder(point, path) {
            for (let i = 0; i < path.length; i++) {
                if (isPointOnSegment(point, path[i], path[(i + 1) % path.length])) return true;
            }
            return false;
        }

        function findEdgeForPoint(point, polygonPath) {
            for (let i = 0; i < polygonPath.length; i++) {
                if (isPointOnSegment(point, polygonPath[i], polygonPath[(i + 1) % polygonPath.length])) return i;
            }
            return -1;
        }

        function isPointInPolygon(point, polygon) {
            let x = point[0], y = point[1];
            let inside = false;
            for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
                let xi = polygon[i][0], yi = polygon[i][1];
                let xj = polygon[j][0], yj = polygon[j][1];
                let intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
                if (intersect) inside = !inside;
            }
            return inside;
        }

        function segmentsIntersect(p1, p2, p3, p4) {
            const isMoveVertical = p1.x === p2.x;
            const isPathVertical = p3.x === p4.x;
            if (isMoveVertical && !isPathVertical) {
                const isCrossingX = p1.x >= Math.min(p3.x, p4.x) && p1.x <= Math.max(p3.x, p4.x);
                const isCrossingY = p3.y >= Math.min(p1.y, p2.y) && p3.y <= Math.max(p1.y, p2.y);
                return isCrossingX && isCrossingY;
            } else if (!isMoveVertical && isPathVertical) {
                const isCrossingX = p3.x >= Math.min(p1.x, p2.x) && p3.x <= Math.max(p1.x, p2.x);
                const isCrossingY = p1.y >= Math.min(p3.y, p4.y) && p1.y <= Math.max(p3.y, p4.y);
                return isCrossingX && isCrossingY;
            }
            return false;
        }

        function normalizeWindingOrder(polygon) {
            let area = 0;
            for (let i = 0; i < polygon.length; i++) {
                const p1 = polygon[i];
                const p2 = polygon[(i + 1) % polygon.length];
                area += (p1[0] * p2[1]) - (p2[0] * p1[1]);
            }
            if (area > 0) { polygon.reverse(); }
            return polygon;
        }

        function handleAreaCapture(path) {
            if (path.length < 2) return;
            const startPoint = path[0];
            const endPoint = path[path.length - 1];
            let startEdgeIdx = findEdgeForPoint(startPoint, borderPath);
            let endEdgeIdx = findEdgeForPoint(endPoint, borderPath);

            if (startEdgeIdx === -1 || endEdgeIdx === -1) { currentDrawnPath = []; return; }

            let polygon1, polygon2;

            if (startEdgeIdx === endEdgeIdx) {
                const edgeV1 = borderPath[startEdgeIdx];
                const dist1 = Math.hypot(startPoint[0] - edgeV1[0], startPoint[1] - edgeV1[1]);
                const dist2 = Math.hypot(endPoint[0] - edgeV1[0], endPoint[1] - edgeV1[1]);
                if (dist1 > dist2) { path = path.reverse(); }

                polygon1 = [...path];
                polygon2 = [...borderPath];
                polygon2.splice(startEdgeIdx + 1, 0, ...path);
            } else {
                const p1 = [], p2 = [];
                let i = (startEdgeIdx + 1) % borderPath.length;
                while (i !== (endEdgeIdx + 1) % borderPath.length) {
                    p1.push(borderPath[i]); i = (i + 1) % borderPath.length;
                }
                p1.push(...[...path].reverse());

                i = (endEdgeIdx + 1) % borderPath.length;
                while (i !== (startEdgeIdx + 1) % borderPath.length) {
                    p2.push(borderPath[i]); i = (i + 1) % borderPath.length;
                }
                p2.push(...path);
                polygon1 = p1;
                polygon2 = p2;
            }

            normalizeWindingOrder(polygon1);
            normalizeWindingOrder(polygon2);

            const qixMidpoint = [(cd[0][0] + cd[0][2]) / 2, (cd[0][1] + cd[0][3]) / 2];
            borderPath = isPointInPolygon(qixMidpoint, polygon1) ? polygon1 : polygon2;
            currentDrawnPath = [];

            dot.x = endPoint[0];
            dot.y = endPoint[1];
            dot.onBorder = true;

            const newEdgeIndex = findEdgeForPoint(endPoint, borderPath);
            if (newEdgeIndex !== -1) {
                dot.currentEdgeIndex = newEdgeIndex;
                const startOfNewEdge = borderPath[newEdgeIndex];
                dot.positionOnEdge = Math.hypot(dot.x - startOfNewEdge[0], dot.y - startOfNewEdge[1]);
            } else {
                dot.x = borderPath[0][0];
                dot.y = borderPath[0][1];
                dot.currentEdgeIndex = 0;
                dot.positionOnEdge = 0;
            }
        }

        function update() {
            if (dot.onBorder) updateBorderMode();
            else if (isDrawing) updateDrawingMode();
            updateQix();
        }

        function updateBorderMode() {
            const edgeIndex = dot.currentEdgeIndex;
            if (edgeIndex === -1 || edgeIndex >= borderPath.length) { dot.currentEdgeIndex = 0; return; }
            const startNode = borderPath[edgeIndex];
            const endNode = borderPath[(edgeIndex + 1) % borderPath.length];
            const edgeVector = [endNode[0] - startNode[0], endNode[1] - startNode[1]];
            const edgeLength = Math.sqrt(edgeVector[0]**2 + edgeVector[1]**2);
            let move = 0;
            if (Math.abs(edgeVector[0]) > Math.abs(edgeVector[1])) {
                if (edgeVector[0] > 0) { if(keys.ArrowRight) move = dot.speed; if(keys.ArrowLeft) move = -dot.speed; }
                else { if(keys.ArrowLeft) move = dot.speed; if(keys.ArrowRight) move = -dot.speed; }
            } else {
                if (edgeVector[1] > 0) { if(keys.ArrowDown) move = dot.speed; if(keys.ArrowUp) move = -dot.speed; }
                else { if(keys.ArrowUp) move = dot.speed; if(keys.ArrowDown) move = -dot.speed; }
            }
            dot.positionOnEdge += move;
            if (edgeLength > 0 && dot.positionOnEdge > edgeLength) {
                dot.currentEdgeIndex = (dot.currentEdgeIndex + 1) % borderPath.length;
                dot.positionOnEdge -= edgeLength;
            } else if (dot.positionOnEdge < 0) {
                dot.currentEdgeIndex = (dot.currentEdgeIndex - 1 + borderPath.length) % borderPath.length;
                const pES = borderPath[dot.currentEdgeIndex], pEE = borderPath[(dot.currentEdgeIndex + 1) % borderPath.length];
                dot.positionOnEdge += Math.sqrt((pEE[0] - pES[0])**2 + (pEE[1] - pES[1])**2);
            }
            const newEdgeStart = borderPath[dot.currentEdgeIndex], newEdgeEnd = borderPath[(dot.currentEdgeIndex + 1) % borderPath.length];
            const newEdgeVec = [newEdgeEnd[0] - newEdgeStart[0], newEdgeEnd[1] - newEdgeStart[1]];
            const newEdgeLen = Math.sqrt(newEdgeVec[0]**2 + newEdgeVec[1]**2);
            if (newEdgeLen > 0) {
                const unitVec = [newEdgeVec[0] / newEdgeLen, newEdgeVec[1] / newEdgeLen];
                dot.x = newEdgeStart[0] + unitVec[0] * dot.positionOnEdge;
                dot.y = newEdgeStart[1] + unitVec[1] * dot.positionOnEdge;
            }
            if (keys.Control) {
                let dx = 0, dy = 0;
                if (keys.ArrowUp) { dy = -dot.speed; }
                else if (keys.ArrowDown) { dy = dot.speed; }
                else if (keys.ArrowLeft) { dx = -dot.speed; }
                else if (keys.ArrowRight) { dx = dot.speed; }
                if (dx !== 0 || dy !== 0) {
                    const testPoint = [dot.x + dx, dot.y + dy];
                    if (isPointInPolygon(testPoint, borderPath) && !isOnBorder(testPoint, borderPath)) {
                        isDrawing = true; dot.onBorder = false; drawingDirection = (dx !== 0) ? 'horizontal' : 'vertical';
                        lastMove = { dx, dy }; currentDrawnPath.push([dot.x, dot.y]);
                        dot.x += dx; dot.y += dy;
                    }
                }
            }
        }

        function updateDrawingMode() {
            let dx = 0, dy = 0;
            if (keys.ArrowUp) { dy = -dot.speed; } else if (keys.ArrowDown) { dy = dot.speed; }
            else if (keys.ArrowLeft) { dx = -dot.speed; } else if (keys.ArrowRight) { dx = dot.speed; }
            if (dx === 0 && dy === 0) return;
            if (dx === -lastMove.dx && dy === -lastMove.dy) return;
            const moveFrom = { x: dot.x, y: dot.y }, moveTo = { x: dot.x + dx, y: dot.y + dy };
            if (currentDrawnPath.length >= 3) {
                for (let i = 0; i < currentDrawnPath.length - 2; i++) {
                    if (segmentsIntersect(moveFrom, moveTo, {x:currentDrawnPath[i][0], y:currentDrawnPath[i][1]}, {x:currentDrawnPath[i+1][0], y:currentDrawnPath[i+1][1]})) return;
                }
            }
            const newMovementDirection = (dx !== 0) ? 'horizontal' : 'vertical';
            if (drawingDirection !== null && newMovementDirection !== drawingDirection) {
                currentDrawnPath.push([dot.x, dot.y]);
            }
            drawingDirection = newMovementDirection;
            const newPoint = [dot.x + dx, dot.y + dy];
            if (isOnBorder(newPoint, borderPath)) {
                dot.x = newPoint[0]; dot.y = newPoint[1]; isDrawing = false; dot.onBorder = true;
                lastMove = { dx: 0, dy: 0 }; currentDrawnPath.push([dot.x, dot.y]);
                handleAreaCapture(currentDrawnPath);
            } else if (isPointInPolygon(newPoint, borderPath)) {
                dot.x = newPoint[0]; dot.y = newPoint[1]; lastMove = { dx, dy };
            }
        }

        function gameLoop() { update(); draw(); requestAnimationFrame(gameLoop); }
        document.addEventListener('keydown', (event) => { if (event.key in keys) { keys[event.key] = true; event.preventDefault();} });
        document.addEventListener('keyup', (event) => { if (event.key in keys) { keys[event.key] = false; event.preventDefault();} });

        initQix();
        gameLoop();
    </script>
</body>
</html>
